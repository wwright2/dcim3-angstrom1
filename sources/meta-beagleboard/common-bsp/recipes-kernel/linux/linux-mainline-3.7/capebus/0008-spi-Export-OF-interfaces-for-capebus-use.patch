From 215bf1fc2e543f1596fcb4e561a724ddc5f78c00 Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <panto@antoniou-consulting.com>
Date: Tue, 23 Oct 2012 13:23:14 +0300
Subject: [PATCH 08/32] spi: Export OF interfaces for capebus use.

---
 drivers/spi/spi.c       |   31 +++++++++++++++++++++++--------
 include/linux/spi/spi.h |   18 ++++++++++++++++++
 2 files changed, 41 insertions(+), 8 deletions(-)

diff --git a/drivers/spi/spi.c b/drivers/spi/spi.c
index 84c2861..f8de2f2 100644
--- a/drivers/spi/spi.c
+++ b/drivers/spi/spi.c
@@ -801,14 +801,17 @@ err_init_queue:
 /*-------------------------------------------------------------------------*/
 
 #if defined(CONFIG_OF) && !defined(CONFIG_SPARC)
+
 /**
- * of_register_spi_devices() - Register child devices onto the SPI bus
+ * of_register_node_spi_devices() - Register child devices onto the SPI bus
  * @master:	Pointer to spi_master device
+ * @parent_node: Pointer to the device node containg the devices
  *
  * Registers an spi_device for each child node of master node which has a 'reg'
  * property.
  */
-static void of_register_spi_devices(struct spi_master *master)
+void of_register_node_spi_devices(struct spi_master *master,
+		struct device_node *parent_node)
 {
 	struct spi_device *spi;
 	struct device_node *nc;
@@ -816,10 +819,10 @@ static void of_register_spi_devices(struct spi_master *master)
 	int rc;
 	int len;
 
-	if (!master->dev.of_node)
+	if (!parent_node)
 		return;
 
-	for_each_child_of_node(master->dev.of_node, nc) {
+	for_each_child_of_node(parent_node, nc) {
 		/* Alloc an spi_device */
 		spi = spi_alloc_device(master);
 		if (!spi) {
@@ -884,8 +887,20 @@ static void of_register_spi_devices(struct spi_master *master)
 
 	}
 }
-#else
-static void of_register_spi_devices(struct spi_master *master) { }
+EXPORT_SYMBOL_GPL(of_register_node_spi_devices);
+
+/**
+ * of_register_spi_devices() - Register child devices onto the SPI bus
+ * @master:	Pointer to spi_master device
+ *
+ * Registers an spi_device for each child node of master node which has a 'reg'
+ * property.
+ */
+void of_register_spi_devices(struct spi_master *master)
+{
+	of_register_node_spi_devices(master, master->dev.of_node);
+}
+EXPORT_SYMBOL_GPL(of_register_spi_devices);
 #endif
 
 static void spi_master_release(struct device *dev)
@@ -896,12 +911,12 @@ static void spi_master_release(struct device *dev)
 	kfree(master);
 }
 
-static struct class spi_master_class = {
+struct class spi_master_class = {
 	.name		= "spi_master",
 	.owner		= THIS_MODULE,
 	.dev_release	= spi_master_release,
 };
-
+EXPORT_SYMBOL_GPL(spi_master_class);
 
 
 /**
diff --git a/include/linux/spi/spi.h b/include/linux/spi/spi.h
index fa702ae..618aa5e 100644
--- a/include/linux/spi/spi.h
+++ b/include/linux/spi/spi.h
@@ -30,6 +30,8 @@
  */
 extern struct bus_type spi_bus_type;
 
+extern struct class spi_master_class;
+
 /**
  * struct spi_device - Master side proxy for an SPI slave device
  * @dev: Driver model representation of the device.
@@ -856,4 +858,20 @@ spi_unregister_device(struct spi_device *spi)
 extern const struct spi_device_id *
 spi_get_device_id(const struct spi_device *sdev);
 
+#if defined(CONFIG_OF) && !defined(CONFIG_SPARC)
+
+void of_register_node_spi_devices(struct spi_master *master,
+		struct device_node *parent_node);
+
+void of_register_spi_devices(struct spi_master *master);
+
+#else
+
+static inline void of_register_node_spi_devices(struct spi_master *master,
+		struct device_node *parent_node) { }
+
+static inline void of_register_spi_devices(struct spi_master *master) { }
+
+#endif
+
 #endif /* __LINUX_SPI_H */
-- 
1.7.7.6

