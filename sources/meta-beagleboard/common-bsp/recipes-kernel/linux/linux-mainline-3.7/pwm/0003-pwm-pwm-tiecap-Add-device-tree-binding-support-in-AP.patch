From 0251fe52c8af1a885a0a1aac617dba5dd2a77948 Mon Sep 17 00:00:00 2001
From: "Philip, Avinash" <avinashphilip@ti.com>
Date: Fri, 29 Jun 2012 10:52:57 +0530
Subject: [PATCH 03/10] pwm: pwm-tiecap: Add device-tree binding support in
 APWM driver

Adds support for device-tree binding in ECAP APWM driver and custom
of_xlate support. In custom of_xlate support, support for configuring
polarity also been provided. This will provide configuration of ECAP
APWM polarity from client drivers device-tree.
Also size of pwm-cells set to 3 to support polarity configuration from
device tree.

Signed-off-by: Philip, Avinash <avinashphilip@ti.com>
---
 Documentation/devicetree/bindings/pwm/ecap-pwm.txt |   24 +++++++++++++
 drivers/pwm/pwm-tiecap.c                           |   35 ++++++++++++++++++++
 2 files changed, 59 insertions(+), 0 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/pwm/ecap-pwm.txt

diff --git a/Documentation/devicetree/bindings/pwm/ecap-pwm.txt b/Documentation/devicetree/bindings/pwm/ecap-pwm.txt
new file mode 100644
index 0000000..fa56534
--- /dev/null
+++ b/Documentation/devicetree/bindings/pwm/ecap-pwm.txt
@@ -0,0 +1,24 @@
+TI SOC ECAP based APWM controller
+
+Required properties:
+- compatible : Must be "ti, ecap"
+- ti,hwmods : Must be "ecap<n>", n being the instance number (0-based)
+- #pwm-cells: On ECAP the number of cells used to specify a PWM is 3. The
+  first cell specifies the per-chip index of the PWM to use, the second
+  cell is the period cycle in nanoseconds and the third cell is the
+  polarity of PWM output. Polarity 0 gives normal polarity and 1 gives
+  inversed polarity (inverse duty cycle)
+
+Note: Current implementation will fetch base address, irq and dma
+from omap hwmod data base during device registration.
+Future plan is to migrate hwmod data base contents into device tree
+blob so that, all the required data will be used from device tree dts
+file.
+
+Example:
+
+	ecap0: ecap@0 {
+		compatible = "ti, ecap";
+		ti,hwmods = "ecap0";
+		#pwm-cells = <3>;
+	};
diff --git a/drivers/pwm/pwm-tiecap.c b/drivers/pwm/pwm-tiecap.c
index d6d4cf0..d15941c 100644
--- a/drivers/pwm/pwm-tiecap.c
+++ b/drivers/pwm/pwm-tiecap.c
@@ -37,6 +37,8 @@
 #define ECCTL2_SYNC_SEL_DISA	(BIT(7) | BIT(6))
 #define ECCTL2_TSCTR_FREERUN	BIT(4)
 
+#define PWM_CELL_SIZE	3
+
 struct ecap_pwm_chip {
 	struct pwm_chip	chip;
 	unsigned int	clk_rate;
@@ -184,6 +186,26 @@ static const struct pwm_ops ecap_pwm_ops = {
 	.owner		= THIS_MODULE,
 };
 
+static struct pwm_device *of_ecap_xlate(struct pwm_chip *chip,
+		const struct of_phandle_args *args)
+{
+	struct pwm_device *pwm;
+
+	if (chip->of_pwm_n_cells < PWM_CELL_SIZE)
+		return ERR_PTR(-EINVAL);
+
+	if (args->args[0] >= chip->npwm)
+		return ERR_PTR(-EINVAL);
+
+	pwm = pwm_request_from_chip(chip, args->args[0], NULL);
+	if (IS_ERR(pwm))
+		return pwm;
+
+	pwm_set_period(pwm, args->args[1]);
+	pwm_set_polarity(pwm, args->args[2]);
+	return pwm;
+}
+
 static int __devinit ecap_pwm_probe(struct platform_device *pdev)
 {
 	int ret;
@@ -211,6 +233,8 @@ static int __devinit ecap_pwm_probe(struct platform_device *pdev)
 
 	pc->chip.dev = &pdev->dev;
 	pc->chip.ops = &ecap_pwm_ops;
+	pc->chip.of_xlate = of_ecap_xlate;
+	pc->chip.of_pwm_n_cells = PWM_CELL_SIZE;
 	pc->chip.base = -1;
 	pc->chip.npwm = 1;
 
@@ -244,9 +268,20 @@ static int __devexit ecap_pwm_remove(struct platform_device *pdev)
 	return pwmchip_remove(&pc->chip);
 }
 
+#if defined(CONFIG_OF)
+static const struct of_device_id omap_ecap_of_match[] = {
+	{ .compatible = "ti,ecap" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, omap_ecap_of_match);
+#endif
+
 static struct platform_driver ecap_pwm_driver = {
 	.driver = {
 		.name = "ecap",
+#if defined(CONFIG_OF)
+		.of_match_table = of_match_ptr(omap_ecap_of_match),
+#endif
 	},
 	.probe = ecap_pwm_probe,
 	.remove = __devexit_p(ecap_pwm_remove),
-- 
1.7.7.6

