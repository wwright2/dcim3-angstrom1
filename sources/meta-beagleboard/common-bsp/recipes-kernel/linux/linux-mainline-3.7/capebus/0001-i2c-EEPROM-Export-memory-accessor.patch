From de804b3a533d64a7706cac66fcf880f5474d8aa8 Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <panto@antoniou-consulting.com>
Date: Sat, 13 Oct 2012 16:06:48 +0300
Subject: [PATCH 01/32] i2c-EEPROM: Export memory accessor

Various platforms need access to the EEPROM in other
places besides their platform registration callbacks.
Export the memory accessor to the i2c_client and implement
it for the at24 driver.
---
 drivers/misc/eeprom/at24.c |    5 +++++
 include/linux/i2c.h        |   24 ++++++++++++++++++++++++
 2 files changed, 29 insertions(+), 0 deletions(-)

diff --git a/drivers/misc/eeprom/at24.c b/drivers/misc/eeprom/at24.c
index ab1ad41..4f88ae65 100644
--- a/drivers/misc/eeprom/at24.c
+++ b/drivers/misc/eeprom/at24.c
@@ -609,6 +609,9 @@ static int at24_probe(struct i2c_client *client, const struct i2c_device_id *id)
 
 	at24->client[0] = client;
 
+	/* export accessor */
+	client->macc = &at24->macc;
+
 	/* use dummy devices for multiple-address chips */
 	for (i = 1; i < num_addresses; i++) {
 		at24->client[i] = i2c_new_dummy(client->adapter,
@@ -619,6 +622,7 @@ static int at24_probe(struct i2c_client *client, const struct i2c_device_id *id)
 			err = -EADDRINUSE;
 			goto err_clients;
 		}
+		at24->client[i]->macc = &at24->macc;
 	}
 
 	err = sysfs_create_bin_file(&client->dev.kobj, &at24->bin);
@@ -637,6 +641,7 @@ static int at24_probe(struct i2c_client *client, const struct i2c_device_id *id)
 			   I2C_SMBUS_WORD_DATA ? "word" : "byte");
 	}
 
+
 	/* export data to kernel code */
 	if (chip.setup)
 		chip.setup(&at24->macc, chip.context);
diff --git a/include/linux/i2c.h b/include/linux/i2c.h
index 800de22..e20ad4e 100644
--- a/include/linux/i2c.h
+++ b/include/linux/i2c.h
@@ -33,6 +33,7 @@
 #include <linux/of.h>		/* for struct device_node */
 #include <linux/swab.h>		/* for swab16 */
 #include <uapi/linux/i2c.h>
+#include <linux/memory.h>
 
 extern struct bus_type i2c_bus_type;
 extern struct device_type i2c_adapter_type;
@@ -229,9 +230,32 @@ struct i2c_client {
 	struct device dev;		/* the device structure		*/
 	int irq;			/* irq issued by device		*/
 	struct list_head detected;
+
+	/* export accessor */
+	struct memory_accessor *macc;
 };
 #define to_i2c_client(d) container_of(d, struct i2c_client, dev)
 
+static inline ssize_t i2c_memory_read(struct i2c_client *client, char *buf, off_t offset,
+		size_t count)
+{
+	struct memory_accessor *macc = client->macc;
+
+	if (macc == NULL || macc->read == NULL)
+		return -ENODEV;
+	return (*client->macc->read)(macc, buf, offset, count);
+}
+
+static inline ssize_t i2c_memory_write(struct i2c_client *client, const char *buf, off_t offset,
+		size_t count)
+{
+	struct memory_accessor *macc = client->macc;
+
+	if (macc == NULL || macc->write == NULL)
+		return -ENODEV;
+	return (*client->macc->write)(macc, buf, offset, count);
+}
+
 extern struct i2c_client *i2c_verify_client(struct device *dev);
 extern struct i2c_adapter *i2c_verify_adapter(struct device *dev);
 
-- 
1.7.7.6

